@startuml
start

:initGame();
if (fopen("savegame.dat", "rb")) then (成功)
  :fread()加载游戏状态;
else (失败)
  :memset()清空游戏区域;
  :srand()初始化随机数;
endif

while (!gameOver) is (是)
  :newPiece();
  :memcpy()保存状态到history;
  
  while (!checkCollision()) is (是)
    :checkCollision(&currentPiece);
    if (碰撞?) then (是)
      :lockPiece();
      :clearLines();
      :updateScore();
    else (否)
      :updatePiecePosition();
    endif
  endwhile
  
  :updateAnimation(deltaTime);
  :handleInput();
endwhile

:显示游戏结束画面;
stop

@enduml

@startuml
title checkCollision流程

start
:for (i = 0; i < 4; i++);
:for (j = 0; j < 4; j++);
if (piece->shape[i][j]) then (是)
  :x = piece->x + j;
  :y = piece->y + i;
  if (x < 0 || x >= ARENA_WIDTH || y >= ARENA_HEIGHT) then (是)
    :return true;
  else (否)
    :继续循环;
  endif
else (否)
  :继续循环;
endif

if (循环结束) then (是)
  :return false;
endif
stop

@enduml

@startuml
title undoLastMove流程

start
:restoreIndex = (historyIndex - 1 + HISTORY_SIZE) % HISTORY_SIZE;
:memcpy(arena, history[restoreIndex].arena);
:currentPiece = history[restoreIndex].currentPiece;
:nextPiece = history[restoreIndex].nextPiece;
:score = history[restoreIndex].score;
stop

@enduml

@startuml
title updateAnimation流程

start
if (clearAnim.isAnimating) then (是)
  :clearAnim.timer += deltaTime;
  if ((int)(clearAnim.timer * 10) % 2 == 0) then (是)
    :clearAnim.visible = true;
  else (否)
    :clearAnim.visible = false;
  endif
endif
stop

@enduml
